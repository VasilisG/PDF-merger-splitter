/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import java.awt.List;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.apache.pdfbox.pdmodel.PDDocument;
import pdfmergersplitter.Constants;
import pdfmergersplitter.DocPart;
import pdfmergersplitter.Verifier;

/**
 *
 * @author Vasilis
 */
public class AddDocPartMergeFrame extends javax.swing.JFrame {
    
    //Listener object to bind to buttons.
    private ButtonListener buttonListener;
    
    //Listener object to bind to checkbox.
    private CheckBoxListener checkBoxListener;
    
    //Attributes that will need for parameter manipulation.
    private List mergeList;
    private ArrayList<DocPart> docPartMergeList;
    
    private File documentFile = null;
    private PDDocument document = null;
    
    private int documentPages;

    /**
     * Creates new form AddDocPartFrame
     */
    public AddDocPartMergeFrame(List inputList, ArrayList<DocPart> inputDocPartList) {
        initComponents();
        bindButtonListeners();
        
        mergeList = inputList;
        docPartMergeList = inputDocPartList;
                
        setVisible(true);
        setLocationRelativeTo(null);
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        startPageLabel = new javax.swing.JLabel();
        endPageLabel = new javax.swing.JLabel();
        filenameLabel = new javax.swing.JLabel();
        startPageField = new javax.swing.JTextField();
        endPageField = new javax.swing.JTextField();
        filenameField = new javax.swing.JTextField();
        addDocButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        allPagesCheckBox = new javax.swing.JCheckBox();
        addPDFileButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Add Document");
        setResizable(false);

        startPageLabel.setText("Start page:");

        endPageLabel.setText("End page:");

        filenameLabel.setText("File name:");

        endPageField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                endPageFieldActionPerformed(evt);
            }
        });

        filenameField.setEditable(false);
        filenameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filenameFieldActionPerformed(evt);
            }
        });

        addDocButton.setText("Add Doc");

        cancelButton.setText("Cancel");

        allPagesCheckBox.setText("All Pages");

        addPDFileButton.setText("Add file");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(282, Short.MAX_VALUE)
                        .addComponent(addDocButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancelButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(filenameLabel)
                                .addGap(18, 18, 18)
                                .addComponent(filenameField))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(startPageLabel)
                                    .addComponent(endPageLabel))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(allPagesCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(endPageField)
                                    .addComponent(startPageField))
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(addPDFileButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(startPageLabel)
                    .addComponent(startPageField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(endPageLabel)
                    .addComponent(endPageField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(allPagesCheckBox)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(filenameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(filenameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addPDFileButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addDocButton)
                    .addComponent(cancelButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void endPageFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_endPageFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_endPageFieldActionPerformed

    private void filenameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filenameFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_filenameFieldActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AddDocPartMergeFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AddDocPartMergeFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AddDocPartMergeFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AddDocPartMergeFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //new AddDocPartMergeFrame().setVisible(true);
            }
        });
    }
    
    //Method that binds listener to buttons.
    private void bindButtonListeners(){
        buttonListener = new ButtonListener();
        addDocButton.addActionListener(buttonListener);
        addPDFileButton.addActionListener(buttonListener);
        cancelButton.addActionListener(buttonListener);
        
        checkBoxListener = new CheckBoxListener();
        allPagesCheckBox.addItemListener(checkBoxListener);
    }
    
    //Method that reset the text of text fields.
    private void resetFields(){
        startPageField.setText(Constants.EMPTY_STRING);
        endPageField.setText(Constants.EMPTY_STRING);
        allPagesCheckBox.setSelected(false);
    }
    
    //Method that shows an error message.
    private void showMessage(String title, String message, int messageType){
        JOptionPane.showMessageDialog(this, message, title, messageType);
    }
    
    //Method that shows file chooser with this frame as parent
    private void showOpenDialogOnFrame(JFileChooser fileChooser){
        fileChooser.showOpenDialog(this);
    }
    
    //Listener class that will respond to key presses.
    class ButtonListener implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent event) {
           
            if(event.getSource() == addDocButton){
                
                if(documentFile == null){
                    showMessage(Constants.ERROR_TITLE, Constants.NO_DOCUMENT_WAS_DEFINED_YET_MESSAGE, Constants.ERROR_MESSAGE);
                }
                else{
                    String startPageString = startPageField.getText();
                    String endPageString = endPageField.getText();
                    String filenameString = filenameField.getText();
                
                    boolean allPages = allPagesCheckBox.isSelected();
                
                    boolean startPageVerify = Verifier.verifyNumericInput(startPageString);
                    boolean endPageVerify = Verifier.verifyNumericInput(endPageString);
                    boolean filenameVerify = Verifier.verifyFilenameInput(filenameString);
                
                    if(!startPageVerify || !endPageVerify || !filenameVerify){
                        showMessage(Constants.ERROR_TITLE, Constants.INVALID_TEXT_FIELD_VALUE_MESSAGE, Constants.ERROR_MESSAGE);
                        resetFields();
                    }
                    else{
                        Integer startPage = Integer.parseInt(startPageString);
                        Integer endPage = Integer.parseInt(endPageString);
                                       
                        if(!Verifier.arePageIndicesValid(startPage, endPage, documentPages)){
                            showMessage(Constants.ERROR_TITLE, Constants.INVALID_START_AND_END_PAGE_INDICES_MESSAGE, Constants.ERROR_MESSAGE);
                            resetFields();
                        }
                        else{
                            DocPart docPart = new DocPart(documentFile, document, startPage, endPage, documentFile.getName());
                            docPartMergeList.add(docPart);
                            mergeList.add(docPart.toString());
                            showMessage(Constants.INFO_TITLE, Constants.DOC_PART_ADDED_TO_LIST, Constants.INFO_MESSAGE);
                        }
                    }
                }
            }
            
            if(event.getSource() == addPDFileButton){
                
                JFileChooser fileChooser = new JFileChooser();
                fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
                
                FileNameExtensionFilter filter = new FileNameExtensionFilter(Constants.FILE_FILTER, Constants.PDF_FILTER_EXTENSION);
                fileChooser.setFileFilter(filter);
                fileChooser.showOpenDialog(mergeList);
                //showOpenDialogOnFrame(fileChooser);
                
                documentFile = fileChooser.getSelectedFile();
                if(documentFile != null){
                    try {
                        document = PDDocument.load(documentFile);
                        documentPages = document.getNumberOfPages();
                        filenameField.setText(documentFile.getName());
                    
                    } catch (IOException ex) {
                        showMessage(Constants.ERROR_TITLE, Constants.ERROR_LOADING_DOCUMENT_MESSAGE, Constants.INFO_MESSAGE);
                        resetFields();
                    //Logger.getLogger(AddDocPartMergeFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
            
            if(event.getSource() == cancelButton){
                dispose();
            }
        } 
    }
    
    //Listener that will respond to changes in checkbox.
    class CheckBoxListener implements ItemListener {

        @Override
        public void itemStateChanged(ItemEvent event) {
            boolean allPages = allPagesCheckBox.isSelected();
            if(allPages){
                //Checking to see if user has defined a file to add to doc part.
                if(document == null){
                    showMessage(Constants.ERROR_TITLE, Constants.NO_DOCUMENT_WAS_DEFINED_YET_MESSAGE, Constants.ERROR_MESSAGE);
                }
                else{
                    startPageField.setText(String.valueOf(1));
                    endPageField.setText(String.valueOf(document.getNumberOfPages()));
                }
            }
            else{
                startPageField.setText(Constants.EMPTY_STRING);
                endPageField.setText(Constants.EMPTY_STRING);
            }
        }
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addDocButton;
    private javax.swing.JButton addPDFileButton;
    private javax.swing.JCheckBox allPagesCheckBox;
    private javax.swing.JButton cancelButton;
    private javax.swing.JTextField endPageField;
    private javax.swing.JLabel endPageLabel;
    private javax.swing.JTextField filenameField;
    private javax.swing.JLabel filenameLabel;
    private javax.swing.JTextField startPageField;
    private javax.swing.JLabel startPageLabel;
    // End of variables declaration//GEN-END:variables
}
