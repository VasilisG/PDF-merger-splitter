/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import java.awt.List;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import org.apache.pdfbox.pdmodel.PDDocument;
import pdfmergersplitter.DocPart;
import pdfmergersplitter.Constants;
import pdfmergersplitter.Verifier;

/**
 *
 * @author Vasilis
 */
public class EditDocPartSplitFrame extends javax.swing.JFrame {
    
    //ButtonListener to bind to buttons.
    private ButtonListener buttonListener;
    
    //Attributes needed for constructor parameter passing.
    private final ArrayList<DocPart> docPartSplitList;
    private final List splitList;
    private final PDDocument document;
    private final int documentPages;
    private final int currentIndex;

    /**
     * Creates new form AddDocPartFrame
     */
    public EditDocPartSplitFrame(ArrayList<DocPart> docPartInList, List inList, int index, PDDocument inDocument) {
        
        initComponents();
        bindButtonListeners();
        
        docPartSplitList = docPartInList;
        splitList = inList;
        document = inDocument;
        documentPages = document.getNumberOfPages();
        currentIndex = index;
        
        displayDocPartInfo(docPartSplitList.get(currentIndex));
        
        setVisible(true);
        setLocationRelativeTo(null);
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        startPageLabel = new javax.swing.JLabel();
        endPageLabel = new javax.swing.JLabel();
        startPageField = new javax.swing.JTextField();
        endPageField = new javax.swing.JTextField();
        editDocButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        FilenameLabel = new javax.swing.JLabel();
        filenameField = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Edit Document");
        setResizable(false);

        startPageLabel.setText("Start page:");

        endPageLabel.setText("End page:");

        endPageField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                endPageFieldActionPerformed(evt);
            }
        });

        editDocButton.setText("Edit Doc");

        cancelButton.setText("Cancel");

        FilenameLabel.setText("Filename:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(158, Short.MAX_VALUE)
                        .addComponent(editDocButton, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(startPageLabel)
                                    .addComponent(endPageLabel)))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(FilenameLabel)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(filenameField, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(startPageField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 64, Short.MAX_VALUE)
                                    .addComponent(endPageField, javax.swing.GroupLayout.Alignment.LEADING))
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(startPageLabel)
                    .addComponent(startPageField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(endPageLabel)
                    .addComponent(endPageField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(FilenameLabel)
                    .addComponent(filenameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(editDocButton)
                    .addComponent(cancelButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void endPageFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_endPageFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_endPageFieldActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EditDocPartSplitFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EditDocPartSplitFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EditDocPartSplitFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EditDocPartSplitFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //new EditDocPartSplitFrame().setVisible(true);
            }
        });
    }
    
    //Method that bind the ButtonListener object to buttons.
    private void bindButtonListeners(){
        
        buttonListener = new ButtonListener();
        
        editDocButton.addActionListener(buttonListener);
        cancelButton.addActionListener(buttonListener);
    }
    
    //Method that sets displays the doc part's current info in text fields.
    private void displayDocPartInfo(DocPart docPart){
        
        filenameField.setText(docPart.getFilename());
        startPageField.setText(Integer.toString(docPart.getStartPage()));
        endPageField.setText(Integer.toString(docPart.getEndPage()));
    } 
    
    //Method that shows an error message.
    private void showMessage(String title, String message, int messageType){
        JOptionPane.showMessageDialog(this, message, title, messageType);
    }
    
    //Method that resets the text of text fields.
    private void resetFields(){
        startPageField.setText(Constants.EMPTY_STRING);
        endPageField.setText(Constants.EMPTY_STRING);
        filenameField.setText(Constants.EMPTY_STRING);
    }
    
    //Listener class that will respond to button presses.
    class ButtonListener implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent event) {
            
            if(event.getSource() == editDocButton){
                
                String startPageString = startPageField.getText();
                String endPageString = endPageField.getText();
                String filename = filenameField.getText();
                
                boolean startPageVerify = Verifier.verifyNumericInput(startPageString);
                boolean endPageVerify = Verifier.verifyNumericInput(endPageString);
                boolean filenameVerify = Verifier.verifyFilenameInput(filename);
                
                if(!startPageVerify || !endPageVerify || !filenameVerify){
                    showMessage(Constants.ERROR_TITLE, Constants.INVALID_TEXT_FIELD_VALUE_MESSAGE, Constants.ERROR_MESSAGE);
                    resetFields();
                }
                
                else{
                    Integer startPage = Integer.parseInt(startPageString);
                    Integer endPage = Integer.parseInt(endPageString);
                    
                    if(!Verifier.arePageIndicesValid(startPage, endPage, documentPages)){
                        showMessage(Constants.ERROR_TITLE, Constants.INVALID_START_AND_END_PAGE_INDICES_MESSAGE, Constants.ERROR_MESSAGE);
                        resetFields();
                    }
                    else{
                        DocPart docPart = docPartSplitList.get(currentIndex);
                        docPart.setStartPage(startPage);
                        docPart.setEndPage(endPage);
                        docPart.setFilename(filename);
                        
                        docPartSplitList.set(currentIndex, docPart);
                        splitList.replaceItem(docPart.toString(), currentIndex);
                        
                        showMessage(Constants.INFO_TITLE, Constants.DOC_PART_EDITED, Constants.INFO_MESSAGE);
                    }
                }
            }
            
            if(event.getSource() == cancelButton){
                dispose();
            }
        }
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel FilenameLabel;
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton editDocButton;
    private javax.swing.JTextField endPageField;
    private javax.swing.JLabel endPageLabel;
    private javax.swing.JTextField filenameField;
    private javax.swing.JTextField startPageField;
    private javax.swing.JLabel startPageLabel;
    // End of variables declaration//GEN-END:variables
}
