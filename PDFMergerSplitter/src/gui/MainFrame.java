/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.ListModel;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.apache.pdfbox.pdmodel.PDDocument;
import pdfmergersplitter.DocPart;
import pdfmergersplitter.Constants;
import pdfmergersplitter.DocMerger;
import pdfmergersplitter.DocSplitter;
import pdfmergersplitter.Verifier;

/**
 *
 * @author Vasilis
 */
public class MainFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainFrame
     */
    
    //Structures that will hold the file to be splitted.
    private File toBeSplittedFile = null;
    private PDDocument document = null;
    
    //Structures that will hold the file to be merged;
    private File toBeMergedFile = null;
    private PDDocument finalDocument = null;
    
    //Listeners
    private MergeButtonListener mergeButtonListener;
    private SplitButtonListener splitButtonListener;
    private SplitListListener splitListListener;
    private MergeListListener mergeListListener;
    
    //Merge/Split lists with doc parts.
    private ArrayList<DocPart> docPartMergeList;
    private ArrayList<DocPart> docPartSplitList;
    
    //Constructor
    public MainFrame() {
                        
        initComponents();
        initDocPartLists();
        setOneItemSelectionListMode();
        bindButtonListeners();
        setVisible(true);
        setLocationRelativeTo(null);
        setTitle(Constants.APP_TITLE);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mergedTabbedPane = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        splitList = new java.awt.List();
        addDocPartButton = new javax.swing.JButton();
        editDocPartButton = new javax.swing.JButton();
        deleteDocPartButton = new javax.swing.JButton();
        startPageLabel = new javax.swing.JLabel();
        endPageLabel = new javax.swing.JLabel();
        filenameLabel = new javax.swing.JLabel();
        filePathLabel = new javax.swing.JLabel();
        startPageField = new javax.swing.JTextField();
        endPageField = new javax.swing.JTextField();
        filenameField = new javax.swing.JTextField();
        filePathField = new javax.swing.JTextField();
        splitPDFButton = new javax.swing.JButton();
        deleteAllButton = new javax.swing.JButton();
        sourceFileNameLabel = new javax.swing.JLabel();
        sourceFileNameField = new javax.swing.JTextField();
        browseSplitSourceFileButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        mergeList = new java.awt.List();
        addDocPartMergeButton = new javax.swing.JButton();
        editDocPartMergeButton = new javax.swing.JButton();
        deleteDocPartMergeButton = new javax.swing.JButton();
        deleteAllMergeButton = new javax.swing.JButton();
        startPageMergeLabel = new javax.swing.JLabel();
        startPageMergeField = new javax.swing.JTextField();
        endPageMergeLabel = new javax.swing.JLabel();
        endPageMergeField = new javax.swing.JTextField();
        filenameMergeLabel = new javax.swing.JLabel();
        filenameMergeField = new javax.swing.JTextField();
        filePathMergeLabel = new javax.swing.JLabel();
        filePathMergeField = new javax.swing.JTextField();
        finalNameLabel = new javax.swing.JLabel();
        finalNameField = new javax.swing.JTextField();
        finalPathLabel = new javax.swing.JLabel();
        finalPathField = new javax.swing.JTextField();
        browseButton = new javax.swing.JButton();
        mergePDFButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        addDocPartButton.setText("Add");

        editDocPartButton.setText("Edit");

        deleteDocPartButton.setText("Delete");

        startPageLabel.setText("Start page:");

        endPageLabel.setText("End page: ");

        filenameLabel.setText("File name:");

        filePathLabel.setText("File path:");

        startPageField.setEditable(false);

        endPageField.setEditable(false);

        filenameField.setEditable(false);

        filePathField.setEditable(false);

        splitPDFButton.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        splitPDFButton.setText("Split PDF");

        deleteAllButton.setText("Delete All");

        sourceFileNameLabel.setText("Source file name:");

        sourceFileNameField.setEditable(false);
        sourceFileNameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sourceFileNameFieldActionPerformed(evt);
            }
        });

        browseSplitSourceFileButton.setText("Browse");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(addDocPartButton, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(editDocPartButton, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(deleteDocPartButton, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(deleteAllButton, javax.swing.GroupLayout.DEFAULT_SIZE, 90, Short.MAX_VALUE))
                            .addComponent(splitList, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(sourceFileNameLabel)
                            .addComponent(filePathLabel)
                            .addComponent(filenameLabel)
                            .addComponent(endPageLabel)
                            .addComponent(startPageLabel))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(browseSplitSourceFileButton)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(filePathField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE)
                                .addComponent(startPageField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(endPageField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(filenameField, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(sourceFileNameField)))
                        .addContainerGap(16, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(splitPDFButton)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(startPageLabel)
                            .addComponent(startPageField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(endPageLabel)
                            .addComponent(endPageField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(filenameLabel)
                            .addComponent(filenameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(filePathLabel)
                            .addComponent(filePathField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(sourceFileNameLabel)
                            .addComponent(sourceFileNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(splitList, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addDocPartButton)
                    .addComponent(editDocPartButton)
                    .addComponent(deleteDocPartButton)
                    .addComponent(deleteAllButton)
                    .addComponent(browseSplitSourceFileButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 77, Short.MAX_VALUE)
                .addComponent(splitPDFButton, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        mergedTabbedPane.addTab("Split Documents", jPanel1);

        addDocPartMergeButton.setText("Add");

        editDocPartMergeButton.setText("Edit");

        deleteDocPartMergeButton.setText("Delete");

        deleteAllMergeButton.setText("Delete All");

        startPageMergeLabel.setText("Start page:");

        startPageMergeField.setEditable(false);

        endPageMergeLabel.setText("End page: ");

        endPageMergeField.setEditable(false);

        filenameMergeLabel.setText("File name:");

        filenameMergeField.setEditable(false);

        filePathMergeLabel.setText("File path:");

        filePathMergeField.setEditable(false);

        finalNameLabel.setText("Final name:");

        finalPathLabel.setText("Final path:");

        finalPathField.setEditable(false);

        browseButton.setText("Browse");

        mergePDFButton.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        mergePDFButton.setText("Merge PDFs");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(mergePDFButton)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(addDocPartMergeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(editDocPartMergeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(deleteDocPartMergeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(deleteAllMergeButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(mergeList, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(endPageMergeLabel)
                                        .addComponent(startPageMergeLabel))
                                    .addComponent(filePathMergeLabel)
                                    .addComponent(finalNameLabel, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(startPageMergeField, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(endPageMergeField, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(filePathMergeField, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                .addComponent(finalNameField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 286, Short.MAX_VALUE)
                                                .addComponent(finalPathField, javax.swing.GroupLayout.Alignment.LEADING))
                                            .addComponent(filenameMergeField, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(browseButton, javax.swing.GroupLayout.Alignment.LEADING))
                                        .addGap(11, 11, 11))))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(finalPathLabel)
                                    .addComponent(filenameMergeLabel))
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(startPageMergeLabel)
                            .addComponent(startPageMergeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(endPageMergeLabel)
                            .addComponent(endPageMergeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(filenameMergeLabel)
                            .addComponent(filenameMergeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(filePathMergeLabel)
                            .addComponent(filePathMergeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(finalNameLabel)
                            .addComponent(finalNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(finalPathLabel)
                            .addComponent(finalPathField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(mergeList, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addDocPartMergeButton)
                    .addComponent(editDocPartMergeButton)
                    .addComponent(deleteDocPartMergeButton)
                    .addComponent(deleteAllMergeButton)
                    .addComponent(browseButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 77, Short.MAX_VALUE)
                .addComponent(mergePDFButton, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        mergedTabbedPane.addTab("Merge Documents", jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(mergedTabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 720, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mergedTabbedPane)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void sourceFileNameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sourceFileNameFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_sourceFileNameFieldActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }
    
    //Add the MergeButtonListener to all buttons on the Merge Tab.
    private void bindMergeButtonListener(){
        
        mergeButtonListener = new MergeButtonListener();
    
        addDocPartMergeButton.addActionListener(mergeButtonListener);
        editDocPartMergeButton.addActionListener(mergeButtonListener);
        deleteDocPartMergeButton.addActionListener(mergeButtonListener);
        deleteAllMergeButton.addActionListener(mergeButtonListener);
        browseButton.addActionListener(mergeButtonListener);
        mergePDFButton.addActionListener(mergeButtonListener);
    }
    
    
    //Add the SplitButtonListener to all buttons on the Split Tab.
    private void bindSplitButtonListener(){
        
        splitButtonListener = new SplitButtonListener();
    
        addDocPartButton.addActionListener(splitButtonListener);
        editDocPartButton.addActionListener(splitButtonListener);
        deleteDocPartButton.addActionListener(splitButtonListener);
        deleteAllButton.addActionListener(splitButtonListener);
        browseSplitSourceFileButton.addActionListener(splitButtonListener);
        splitPDFButton.addActionListener(splitButtonListener);
    }
    
    //Add the SplitListListener to splitList.
    private void bindSplitListListener(){
        splitListListener = new SplitListListener();
        splitList.addItemListener(splitListListener);
    }
    
    //Add the MergeListListener to mergeList.
    private void bindMergeListListener(){
        mergeListListener = new MergeListListener();
        mergeList.addItemListener(mergeListListener);
    }
    
    //Wrapper method for both listeners.
    private void bindButtonListeners(){
        bindMergeButtonListener();
        bindSplitButtonListener();
        bindMergeListListener();
        bindSplitListListener();
    }
        
    //Initialize lists.
    private void initDocPartLists(){        
        docPartMergeList = new ArrayList<>();
        docPartSplitList = new ArrayList<>();
    }
    
    //Set selection mode to one item of Lists.
    private void setOneItemSelectionListMode(){
        splitList.setMultipleMode(false);
        mergeList.setMultipleMode(false);
    }
    
    //Fill in the text field with the split file source name.
    private void showSourceFileName(JTextField textField, File file){
        textField.setText(file.getAbsoluteFile().toString());
    }
    
    //Fill in the text field with the split file source path.
    private void showSourceFilePath(JTextField textField, File file){
        textField.setText(file.getParent());
    }
    
    //Create an option pane with a warning message.
    private void showMessage(String title, String message, int messageType){
        JOptionPane.showMessageDialog(this,message,title,messageType);
    }
    
    //Method that displays doc part's information in split fields.
    private void displayDocPartSplitInfo(DocPart docPart){
        startPageField.setText(String.valueOf(docPart.getStartPage()));
        endPageField.setText(String.valueOf(docPart.getEndPage()));
        filenameField.setText(String.valueOf(docPart.getFilename()));
    }
    
    //Method that display doc part's information in merge fields.
    private void displayDocPartMergeInfo(DocPart docPart){
        startPageMergeField.setText(String.valueOf(docPart.getStartPage()));
        endPageMergeField.setText(String.valueOf(docPart.getEndPage()));
        filenameMergeField.setText(String.valueOf(docPart.getFilename()));
        filePathMergeField.setText(String.valueOf(docPart.getDocFile().getParent().toString()));
    }
    
    //Method that clears all split doc part fields.
    private void clearDocPartSplitInfo(){
        startPageField.setText(Constants.EMPTY_STRING);
        endPageField.setText(Constants.EMPTY_STRING);
        filenameField.setText(Constants.EMPTY_STRING);
    }
    
    //Method that clears all merge doc part fields.
    private void clearDocPartMergeInfo(){
        startPageMergeField.setText(Constants.EMPTY_STRING);
        endPageMergeField.setText(Constants.EMPTY_STRING);
        filenameMergeField.setText(Constants.EMPTY_STRING);
        filePathMergeField.setText(Constants.EMPTY_STRING);
    }
    
    //Listener that will respond to button presses on the Merge Tab.
    class MergeButtonListener implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent event) {
            
            if(event.getSource() == addDocPartMergeButton){
                //System.out.println("ADD was pressed.");
                new AddDocPartMergeFrame(mergeList, docPartMergeList);
            }
            
            if(event.getSource() == editDocPartMergeButton){
                //System.out.println("EDIT was pressed.");
                int index = mergeList.getSelectedIndex();
                
                if(mergeList.getItemCount() == 0){
                    showMessage(Constants.ERROR_TITLE, Constants.EMPTY_LIST_ERROR_MESSAGE, Constants.ERROR_MESSAGE);
                }
                else if(index < 0){
                    showMessage(Constants.ERROR_TITLE, Constants.NO_ITEM_SELECTED_ERROR_MESSAGE, Constants.ERROR_MESSAGE);
                }
                else new EditDocPartMergeFrame(mergeList, docPartMergeList, index);
            }
            
            if(event.getSource() == deleteDocPartMergeButton){
                //System.out.println("DELETE was pressed.");
                if(mergeList.getItemCount() == 0){
                    showMessage(Constants.INFO_TITLE, Constants.EMPTY_LIST_ERROR_MESSAGE, Constants.INFO_MESSAGE);
                }
                else if(mergeList.getSelectedIndex() < 0){
                    showMessage(Constants.ERROR_TITLE, Constants.NO_ITEM_SELECTED_ERROR_MESSAGE, Constants.ERROR_MESSAGE);
                }
                else{
                    int index = mergeList.getSelectedIndex();
                    docPartMergeList.remove(index);
                    mergeList.remove(index);
                    
                    clearDocPartMergeInfo();
                    showMessage(Constants.INFO_TITLE, Constants.DOC_PART_DELETED_FROM_LIST, Constants.INFO_MESSAGE);
                }
            }
            
            if(event.getSource() == deleteAllMergeButton){
                //System.out.println("DELETE ALL was pressed.");
                if(mergeList.getItemCount() == 0){
                    showMessage(Constants.INFO_TITLE, Constants.EMPTY_LIST_ERROR_MESSAGE, Constants.INFO_MESSAGE);
                }
                else{
                    docPartMergeList.clear();
                    mergeList.removeAll();
                    
                    clearDocPartMergeInfo();
                    showMessage(Constants.INFO_TITLE, Constants.ALL_DOC_PARTS_REMOVED_FROM_LIST, Constants.INFO_MESSAGE);
                }
            }
            
            if(event.getSource() == browseButton){
                //System.out.println("BROWSE was pressed.");
                JFileChooser fileChooser = new JFileChooser();
                fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
                fileChooser.showOpenDialog(jPanel2);
                
                toBeMergedFile = fileChooser.getSelectedFile();
                if(toBeMergedFile != null){
                    showSourceFileName(finalPathField, toBeMergedFile);
                    //finalPathField.setText(toBeMergedFile.toString());
                }
            }
            
            if(event.getSource() == mergePDFButton){
                //System.out.println("MERGE was pressed.");
                String finalName = finalNameField.getText();
                if(!Verifier.verifyFilenameInput(finalName)){
                    showMessage(Constants.ERROR_TITLE, Constants.INVALID_FILENAME_MESSAGE, Constants.ERROR_MESSAGE);
                }
                else{
                    String finalPath = finalPathField.getText();
                    String fullNamePath = finalPath + Constants.SLASH + finalName + Constants.FILE_EXTENSION;
                    DocMerger docMerger = new DocMerger(docPartMergeList, fullNamePath);
                    docMerger.saveMergedDocument();
                    
                    showMessage(Constants.INFO_TITLE, Constants.DOCUMENT_SAVED_AT + fullNamePath + Constants.FULL_STOP, Constants.INFO_MESSAGE);
                    //showMessage(Constants.INFO_TITLE, count + Constants.NEW_PDF_DOCUMENTS_WERE_CREATED_AT + finalPath + Constants.FULL_STOP, Constants.INFO_MESSAGE);        
                }
            }
        }
    }
        
    //Listener that will respond to button presses on the Split Tab.
    class SplitButtonListener implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent event) {
            
            if(event.getSource() == addDocPartButton){
                //System.out.println("SPLIT ADD was pressed.");
                if(toBeSplittedFile == null){
                   showMessage(Constants.ERROR_TITLE,Constants.SOURCE_FILE_ERROR_MESSAGE, Constants.ERROR_MESSAGE);
                }
                else new AddDocPartSplitFrame(docPartSplitList, splitList, document);
            }
            
            if(event.getSource() == editDocPartButton){
                //System.out.println("SPLIT EDIT was pressed.");
                if(toBeSplittedFile == null){
                   showMessage(Constants.ERROR_TITLE,Constants.SOURCE_FILE_ERROR_MESSAGE, Constants.ERROR_MESSAGE);
                }
                else {
                    if(splitList.getItemCount() == 0){
                        showMessage(Constants.ERROR_TITLE, Constants.EMPTY_LIST_ERROR_MESSAGE, Constants.ERROR_MESSAGE);
                    }
                    else if(splitList.getSelectedIndex() < 0){
                        showMessage(Constants.ERROR_TITLE, Constants.NO_ITEM_SELECTED_ERROR_MESSAGE, Constants.ERROR_MESSAGE);
                    }
                    else{
                        int index = splitList.getSelectedIndex();
                        new EditDocPartSplitFrame(docPartSplitList, splitList, index, document);
                    }
                }
            }
            
            if(event.getSource() == deleteDocPartButton){
                //System.out.println("SPLIT DELETE was pressed.");
                if(splitList.getItemCount() == 0){
                    showMessage(Constants.INFO_TITLE, Constants.EMPTY_LIST_ERROR_MESSAGE, Constants.INFO_MESSAGE);
                }
                else if(splitList.getSelectedIndex() < 0){
                    showMessage(Constants.ERROR_TITLE, Constants.NO_ITEM_SELECTED_ERROR_MESSAGE, Constants.ERROR_MESSAGE);
                }
                else{
                    int index = splitList.getSelectedIndex();
                    docPartSplitList.remove(index);
                    splitList.remove(index);
                    
                    clearDocPartSplitInfo();
                    showMessage(Constants.INFO_TITLE, Constants.DOC_PART_DELETED_FROM_LIST, Constants.INFO_MESSAGE);
                }
            }
            
            if(event.getSource() == deleteAllButton){
                //System.out.println("SPLIT DELETE ALL was pressed.");
                if(splitList.getItemCount() == 0){
                    showMessage(Constants.INFO_TITLE, Constants.EMPTY_LIST_ERROR_MESSAGE, Constants.INFO_MESSAGE);
                }
                else{
                    docPartSplitList.clear();
                    splitList.removeAll();
                    
                    clearDocPartSplitInfo();
                    showMessage(Constants.INFO_TITLE, Constants.ALL_DOC_PARTS_REMOVED_FROM_LIST, Constants.INFO_MESSAGE);
                }
            }
            
            if(event.getSource() == browseSplitSourceFileButton){
                //System.out.println("SPLIT BROWSE was pressed.");
                JFileChooser fileChooser = new JFileChooser();
                fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
                
                FileNameExtensionFilter filter = new FileNameExtensionFilter(Constants.FILE_FILTER, Constants.PDF_FILTER_EXTENSION);
                fileChooser.setFileFilter(filter);
                fileChooser.showOpenDialog(jPanel1);
                
                toBeSplittedFile = fileChooser.getSelectedFile();
                
                if(toBeSplittedFile != null){
                    try {
                        document = PDDocument.load(toBeSplittedFile);
                    } catch (IOException ex) {
                        Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    
                    showSourceFileName(sourceFileNameField, toBeSplittedFile);
                    showSourceFilePath(filePathField, toBeSplittedFile);
                }
                
            }
            
            if(event.getSource() == splitPDFButton){
                //System.out.println("SPLIT was pressed.");
                if(docPartSplitList.isEmpty()){
                    showMessage(Constants.ERROR_TITLE, Constants.EMPTY_LIST_ERROR_MESSAGE, Constants.ERROR_MESSAGE);
                }
                else{
                    DocSplitter docSplitter = new DocSplitter(docPartSplitList);
         
                    String finalPath = filePathField.getText();
                    docSplitter.saveNewDocuments(finalPath);
                    
                    int count = docSplitter.getNewDocumentCount();
                    
                    showMessage(Constants.INFO_TITLE, count + Constants.NEW_PDF_DOCUMENTS_WERE_CREATED_AT + finalPath + Constants.FULL_STOP, Constants.INFO_MESSAGE);
                }
            }
        }
    }
    
    //Listener class that will respond to item selection events on the split list.
    class SplitListListener implements ItemListener {

        @Override
        public void itemStateChanged(ItemEvent event) {
            if(event.getStateChange() == ItemEvent.SELECTED){
                int index = splitList.getSelectedIndex();
                if(index >= 0){
                    displayDocPartSplitInfo(docPartSplitList.get(index));
                }
            }
        } 
    }
    
    //Listener class that will respond to item selection events on the merge list.
    class MergeListListener implements ItemListener {

        @Override
        public void itemStateChanged(ItemEvent event) {
            if(event.getStateChange() == ItemEvent.SELECTED){
                int index = mergeList.getSelectedIndex();
                if(index >= 0){
                    displayDocPartMergeInfo(docPartMergeList.get(index));
                }
            }
        }
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addDocPartButton;
    private javax.swing.JButton addDocPartMergeButton;
    private javax.swing.JButton browseButton;
    private javax.swing.JButton browseSplitSourceFileButton;
    private javax.swing.JButton deleteAllButton;
    private javax.swing.JButton deleteAllMergeButton;
    private javax.swing.JButton deleteDocPartButton;
    private javax.swing.JButton deleteDocPartMergeButton;
    private javax.swing.JButton editDocPartButton;
    private javax.swing.JButton editDocPartMergeButton;
    private javax.swing.JTextField endPageField;
    private javax.swing.JLabel endPageLabel;
    private javax.swing.JTextField endPageMergeField;
    private javax.swing.JLabel endPageMergeLabel;
    private javax.swing.JTextField filePathField;
    private javax.swing.JLabel filePathLabel;
    private javax.swing.JTextField filePathMergeField;
    private javax.swing.JLabel filePathMergeLabel;
    private javax.swing.JTextField filenameField;
    private javax.swing.JLabel filenameLabel;
    private javax.swing.JTextField filenameMergeField;
    private javax.swing.JLabel filenameMergeLabel;
    private javax.swing.JTextField finalNameField;
    private javax.swing.JLabel finalNameLabel;
    private javax.swing.JTextField finalPathField;
    private javax.swing.JLabel finalPathLabel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private java.awt.List mergeList;
    private javax.swing.JButton mergePDFButton;
    private javax.swing.JTabbedPane mergedTabbedPane;
    private javax.swing.JTextField sourceFileNameField;
    private javax.swing.JLabel sourceFileNameLabel;
    private java.awt.List splitList;
    private javax.swing.JButton splitPDFButton;
    private javax.swing.JTextField startPageField;
    private javax.swing.JLabel startPageLabel;
    private javax.swing.JTextField startPageMergeField;
    private javax.swing.JLabel startPageMergeLabel;
    // End of variables declaration//GEN-END:variables
}

